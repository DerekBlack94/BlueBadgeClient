[{"/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/App.js":"1","/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/Components/Navbar/Navbar.jsx":"2","/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/Components/Characters/CharacterTable.js":"3","/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/Components/Characters/CharacterIndex.js":"4","/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/Components/Characters/CharacterCreate.js":"5","/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/Components/Characters/CharacterEdit.js":"6","/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/index.js":"7"},{"size":1076,"mtime":1606329292918,"results":"8","hashOfConfig":"9"},{"size":840,"mtime":1606316256216,"results":"10","hashOfConfig":"9"},{"size":562,"mtime":1606329179341,"results":"11","hashOfConfig":"9"},{"size":1151,"mtime":1606329342620,"results":"12","hashOfConfig":"9"},{"size":3683,"mtime":1606329851571,"results":"13","hashOfConfig":"9"},{"size":0,"mtime":1606316256212,"results":"14","hashOfConfig":"9"},{"size":288,"mtime":1606329224496,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"lnkm0m",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":1,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/App.js",["33"],"import React from 'react';\nimport {useState, useEffect} from 'react';\nimport Sitebar from './Components/Navbar/Navbar';\n//import Auth from \"./auth/Auth\"\nimport CharacterIndex from './Components/Characters/CharacterIndex';\n\nfunction App () {\n  const [sessionToken, setSessionToken] =useState('');\n  useEffect(() => {\n    if(localStorage.getItem('token')){\n      setSessionToken(localStorage.getItem('token'));\n    }\n  }, [])\n  \n  const updateToken = (newToken) => {\n    localStorage.setItem('token', newToken);\n    setSessionToken(newToken);\n    console.log(sessionToken)\n  }\n  const clearToken = () => {\n    localStorage.clear();\n    setSessionToken('');\n  }\n\n  //**need to have Auth set up before use */\n\n  /*const protectedViews = () => {\n    return (sessionToken === localStorage.getItem('token') ? <CharacterIndex token={sessionToken}/>\n    : <Auth updateToken={updateToken}/> ) \n  }*/\n\n\n  return (\n    <div>\n      <Sitebar clickLogout={clearToken}/>\n      {/* {protectedViews()}  --> set up auth first */} \n      <CharacterIndex />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/Components/Navbar/Navbar.jsx",[],"/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/Components/Characters/CharacterTable.js",["34","35","36"],"/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/Components/Characters/CharacterIndex.js",["37","38","39","40","41","42","43","44","45","46"],"import React, {useState, useEffect} from 'react';\nimport { Container, Row, Col} from 'reactstrap'\nimport CharacterCreate from './CharacterCreate';\nimport CharacterTable from './CharacterTable';\nimport CharacterEdit from './CharacterEdit';\n\nconst CharacterIndex = (props) => {\n    const [characters, setCharacters] = useState([]);\n    const [updateActive, setUpdateActive] = useState(false);\n    const [characterToUpdate, setCharacterToUpdate] = useState({});\n\n    const fetchCharacters = () => {\n        fetch('http://localhost:3000/character', {\n            method: 'GET',\n            headers: new Headers ({\n                'Content-Type': 'application/json',\n                'Authorization' : props.token\n            })\n        }) .then((res) => res.json())\n        .then((charData) => {\n            setCharacters(charData)\n        })\n        /*useEffect(() => {\n            fetchCharacters();\n        }, [])*/\n    };\n\nreturn(\n    <div>\n        <Container>\n            <Row>\n                <Col>\n                <CharacterCreate />\n                </Col>\n            </Row>\n        </Container>\n    </div>\n    );\n}\n\n\nexport default CharacterIndex;","/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/Components/Characters/CharacterCreate.js",["47"],"import React, {useState, useEffect} from 'react';\nimport {Button, Form, FormGroup, Label, Input} from 'reactstrap';\n\nconst CharacterCreate = (props) => {\n    const [project_name, setProject_Name] = useState('');\n    const [name, setName] = useState('');\n    const [age, setAge] = useState();\n    const [race, setRace] = useState('');\n    const [gender, setGender] = useState('');\n    const [character_description, setCharacter_Description] = useState('');\n    const [background, setBackground] = useState('');\n\n    return (\n        <div>\n            <h3>Create a Character!</h3>\n            <Form>\n                <FormGroup>\n                    <Label htmlFor='project_name'>Project Name:</Label>\n                    <br />\n                    <Input name='project_name' type='text' value={project_name} onChange={(e) => setProject_Name(e.target.value)} />\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='name'>Name:</Label>\n                    <br />\n                    <Input type='text' name='name' value={name} onChange={(e) => setName(e.target.value)} />\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='age'>Age:</Label>\n                    <br />\n                    <Input type='text' name='age' value={age} onChange={(e) => setAge(e.target.value)} />\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='race'>Race:</Label>\n                    <br />\n                    <Input type='select' name='race' value={race} onChange={(e) => setRace(e.target.value)}>\n                        <option value=\"Human\">Human</option>\n                        <option value=\"HighElf\">High Elf</option>\n                        <option value=\"DarkElf\">Dark Elf</option>\n                        <option value=\"WoodElf\">Wood Elf</option>\n                        <option value=\"Dwarf\">Dwarf</option>\n                        <option value=\"Tiefling\">Tiefling</option>\n                        <option value=\"HalfOrc\">Half Orc</option>\n                        <option value=\"Hobbit\">Hobbit</option>\n                    </Input>\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='gender'>Gender:</Label>\n                    <br />\n                    <Input type='select' name='gender' value={gender} onChange={(e) => setGender(e.target.value)}>\n                        <option value=\"Male\">Male</option>\n                        <option value=\"Female\">Female</option>\n                        <option value=\"Nonbinary\">Nonbinary</option>\n                        <option value=\"Other\">Other</option>\n                    </Input>\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='character_description'>Character Description:</Label>\n                    <br />\n                    <Input type='textarea' name='character_description' value={character_description} onChange={(e) => setCharacter_Description(e.target.value)} />\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='background'>Character Background:</Label>\n                    <br />\n                    <Input type='textarea'  name='background' value={background} onChange={(e) => setBackground(e.target.value)} />\n                </FormGroup>\n\n                <br />\n                \n                <Button type='submit'>Create</Button>\n                \n            </Form>\n        </div>\n    )\n}\n\nexport default CharacterCreate\n","/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/Components/Characters/CharacterEdit.js",[],"/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/index.js",[],{"ruleId":"48","severity":1,"message":"49","line":15,"column":9,"nodeType":"50","messageId":"51","endLine":15,"endColumn":20},{"ruleId":"48","severity":1,"message":"52","line":2,"column":9,"nodeType":"50","messageId":"51","endLine":2,"endColumn":14},{"ruleId":"48","severity":1,"message":"53","line":2,"column":16,"nodeType":"50","messageId":"51","endLine":2,"endColumn":22},{"ruleId":"48","severity":1,"message":"54","line":5,"column":11,"nodeType":"50","messageId":"51","endLine":5,"endColumn":26},{"ruleId":"48","severity":1,"message":"55","line":1,"column":26,"nodeType":"50","messageId":"51","endLine":1,"endColumn":35},{"ruleId":"48","severity":1,"message":"56","line":4,"column":8,"nodeType":"50","messageId":"51","endLine":4,"endColumn":22},{"ruleId":"48","severity":1,"message":"57","line":5,"column":8,"nodeType":"50","messageId":"51","endLine":5,"endColumn":21},{"ruleId":"48","severity":1,"message":"58","line":8,"column":12,"nodeType":"50","messageId":"51","endLine":8,"endColumn":22},{"ruleId":"48","severity":1,"message":"59","line":9,"column":12,"nodeType":"50","messageId":"51","endLine":9,"endColumn":24},{"ruleId":"48","severity":1,"message":"60","line":9,"column":26,"nodeType":"50","messageId":"51","endLine":9,"endColumn":41},{"ruleId":"48","severity":1,"message":"61","line":10,"column":12,"nodeType":"50","messageId":"51","endLine":10,"endColumn":29},{"ruleId":"48","severity":1,"message":"62","line":10,"column":31,"nodeType":"50","messageId":"51","endLine":10,"endColumn":51},{"ruleId":"48","severity":1,"message":"63","line":12,"column":11,"nodeType":"50","messageId":"51","endLine":12,"endColumn":26},{"ruleId":"64","severity":1,"message":"65","line":13,"column":9,"nodeType":"66","messageId":"67","endLine":19,"endColumn":17,"fix":"68"},{"ruleId":"48","severity":1,"message":"55","line":1,"column":26,"nodeType":"50","messageId":"51","endLine":1,"endColumn":35},"no-unused-vars","'updateToken' is assigned a value but never used.","Identifier","unusedVar","'Table' is defined but never used.","'Button' is defined but never used.","'deleteCharacter' is assigned a value but never used.","'useEffect' is defined but never used.","'CharacterTable' is defined but never used.","'CharacterEdit' is defined but never used.","'characters' is assigned a value but never used.","'updateActive' is assigned a value but never used.","'setUpdateActive' is assigned a value but never used.","'characterToUpdate' is assigned a value but never used.","'setCharacterToUpdate' is assigned a value but never used.","'fetchCharacters' is assigned a value but never used.","no-whitespace-before-property","Unexpected whitespace before property then.","MemberExpression","unexpectedWhitespace",{"range":"69","text":"70"},[733,735],"."]