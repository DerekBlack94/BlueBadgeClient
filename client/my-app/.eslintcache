[{"/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/index.js":"1","/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/Components/Characters/CharacterIndex.js":"2","/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/Components/Characters/CharacterCreate.js":"3","/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/App.js":"4","/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/Components/Characters/CharacterEdit.js":"5"},{"size":288,"mtime":1606744959437,"results":"6","hashOfConfig":"7"},{"size":1900,"mtime":1606747340083,"results":"8","hashOfConfig":"7"},{"size":4645,"mtime":1606746171973,"results":"9","hashOfConfig":"7"},{"size":1098,"mtime":1606746337456,"results":"10","hashOfConfig":"7"},{"size":520,"mtime":1606746502656,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lnkm0m",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/index.js",[],"/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/Components/Characters/CharacterIndex.js",["25"],"import React, {useState, useEffect} from 'react';\nimport { Container, Row, Col} from 'reactstrap'\nimport CharacterCreate from './CharacterCreate';\nimport CharacterTable from './CharacterTable';\nimport CharacterEdit from './CharacterEdit';\n\nconst CharacterIndex = (props) => {\n    const [characters, setCharacters] = useState([]);\n    const [updateActive, setUpdateActive] = useState(false);\n    const [characterToUpdate, setCharacterToUpdate] = useState({});\n\n    const fetchCharacters = () => {\n        fetch('http://localhost:3000/character', {\n            method: 'GET',\n            headers: new Headers ({\n                'Content-Type': 'application/json',\n                'Authorization' : props.token\n            })\n        }) \n            .then((res) => res.json())\n            .then((charData) => {\n                setCharacters(charData)\n        })\n    };\n\n    const editUpdateCharacter = (character) => {\n        setCharacterToUpdate(character);\n        console.log(character);\n    }\n\n    const updateOn = () => {\n        setUpdateActive(true);\n    }\n    \n    const updateOff = () => {\n        setUpdateActive(false);\n    }\n\n    /*useEffect(() => {\n            fetchCharacters();\n        }, [])*/\n\nreturn(\n    <div>\n        <Container>\n            <Row>\n                <Col>\n                    <CharacterCreate fetchCharacters={fetchCharacters} token={props.token} />\n                </Col>\n                <Col>\n                    <CharacterTable characters={characters} editUpdateCharacter={editUpdateCharacter} updateOn={updateOn} fetchCharacters={fetchCharacters} token={props.token} />\n                </Col>\n                {updateActive ? <CharacterEdit characterToUpdate={characterToUpdate} updateOff={updateOff} token={props.token} fetchCharacters={fetchCharacters} /> : <div></div> }\n            </Row>\n        </Container>\n    </div>\n    );\n}\n\n\nexport default CharacterIndex;","/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/Components/Characters/CharacterCreate.js",["26"],"import React, {useState, useEffect} from 'react';\nimport {Button, Form, FormGroup, Label, Input} from 'reactstrap';\n\nconst CharacterCreate = (props) => {\n    const [project_name, setProject_Name] = useState('');\n    const [name, setName] = useState('');\n    const [age, setAge] = useState();\n    const [race, setRace] = useState('');\n    const [gender, setGender] = useState('');\n    const [character_description, setCharacter_Description] = useState('');\n    const [background, setBackground] = useState('');\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        fetch('http://localhost:3000/character/', {\n            method: 'POST',\n            body: JSON.stringify({ character : {\n                project_name: project_name, name: name, age: age, race: race, gender: gender, character_description: character_description, background: background\n            }}),\n            headers: new Headers ({\n                'Content-Type': 'application/json',\n                'Authorization': props.token\n            })\n        })\n            .then((res) => res.json())\n            .then((json) => {\n                console.log(json);\n                setProject_Name('');\n                setName('');\n                setAge();\n                setRace('');\n                setGender('');\n                setCharacter_Description('');\n                setBackground('');\n                props.fetchCharacters();\n            })\n    }\n\n    return (\n        <div>\n            <h3>Create a Character!</h3>\n            <Form>\n                <FormGroup>\n                    <Label htmlFor='project_name'>Project Name:</Label>\n                    <br />\n                    <Input name='project_name' type='text' value={project_name} onChange={(e) => setProject_Name(e.target.value)} />\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='name'>Name:</Label>\n                    <br />\n                    <Input type='text' name='name' value={name} onChange={(e) => setName(e.target.value)} />\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='age'>Age:</Label>\n                    <br />\n                    <Input type='text' name='age' value={age} onChange={(e) => setAge(e.target.value)} />\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='race'>Race:</Label>\n                    <br />\n                    <Input type='select' name='race' value={race} onChange={(e) => setRace(e.target.value)}>\n                        <option value=\"Human\">Human</option>\n                        <option value=\"HighElf\">High Elf</option>\n                        <option value=\"DarkElf\">Dark Elf</option>\n                        <option value=\"WoodElf\">Wood Elf</option>\n                        <option value=\"Dwarf\">Dwarf</option>\n                        <option value=\"Tiefling\">Tiefling</option>\n                        <option value=\"HalfOrc\">Half Orc</option>\n                        <option value=\"Hobbit\">Hobbit</option>\n                    </Input>\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='gender'>Gender:</Label>\n                    <br />\n                    <Input type='select' name='gender' value={gender} onChange={(e) => setGender(e.target.value)}>\n                        <option value=\"Male\">Male</option>\n                        <option value=\"Female\">Female</option>\n                        <option value=\"Nonbinary\">Nonbinary</option>\n                        <option value=\"Other\">Other</option>\n                    </Input>\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='character_description'>Character Description:</Label>\n                    <br />\n                    <Input type='textarea' name='character_description' value={character_description} onChange={(e) => setCharacter_Description(e.target.value)} />\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='background'>Character Background:</Label>\n                    <br />\n                    <Input type='textarea'  name='background' value={background} onChange={(e) => setBackground(e.target.value)} />\n                </FormGroup>\n\n                <br />\n                \n                <Button type='submit' onSubmit={handleSubmit}>Create</Button>\n                \n            </Form>\n        </div>\n    )\n}\n\nexport default CharacterCreate\n","/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/App.js",["27"],"/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/Components/Characters/CharacterEdit.js",["28","29","30","31","32","33","34","35","36","37","38","39","40","41"],"import React, {useState} from 'react';\n\nconst CharacterEdit = () => {\n    const [project_name, setProject_Name] = useState('');\n    const [name, setName] = useState('');\n    const [age, setAge] = useState();\n    const [race, setRace] = useState('');\n    const [gender, setGender] = useState('');\n    const [character_description, setCharacter_Description] = useState('');\n    const [background, setBackground] = useState('');\n\n    return (\n        <div>\n            \n        </div>\n    )\n}\n\nexport default CharacterEdit\n",{"ruleId":"42","severity":1,"message":"43","line":1,"column":26,"nodeType":"44","messageId":"45","endLine":1,"endColumn":35},{"ruleId":"42","severity":1,"message":"43","line":1,"column":26,"nodeType":"44","messageId":"45","endLine":1,"endColumn":35},{"ruleId":"42","severity":1,"message":"46","line":15,"column":9,"nodeType":"44","messageId":"45","endLine":15,"endColumn":20},{"ruleId":"42","severity":1,"message":"47","line":4,"column":12,"nodeType":"44","messageId":"45","endLine":4,"endColumn":24},{"ruleId":"42","severity":1,"message":"48","line":4,"column":26,"nodeType":"44","messageId":"45","endLine":4,"endColumn":41},{"ruleId":"42","severity":1,"message":"49","line":5,"column":12,"nodeType":"44","messageId":"45","endLine":5,"endColumn":16},{"ruleId":"42","severity":1,"message":"50","line":5,"column":18,"nodeType":"44","messageId":"45","endLine":5,"endColumn":25},{"ruleId":"42","severity":1,"message":"51","line":6,"column":12,"nodeType":"44","messageId":"45","endLine":6,"endColumn":15},{"ruleId":"42","severity":1,"message":"52","line":6,"column":17,"nodeType":"44","messageId":"45","endLine":6,"endColumn":23},{"ruleId":"42","severity":1,"message":"53","line":7,"column":12,"nodeType":"44","messageId":"45","endLine":7,"endColumn":16},{"ruleId":"42","severity":1,"message":"54","line":7,"column":18,"nodeType":"44","messageId":"45","endLine":7,"endColumn":25},{"ruleId":"42","severity":1,"message":"55","line":8,"column":12,"nodeType":"44","messageId":"45","endLine":8,"endColumn":18},{"ruleId":"42","severity":1,"message":"56","line":8,"column":20,"nodeType":"44","messageId":"45","endLine":8,"endColumn":29},{"ruleId":"42","severity":1,"message":"57","line":9,"column":12,"nodeType":"44","messageId":"45","endLine":9,"endColumn":33},{"ruleId":"42","severity":1,"message":"58","line":9,"column":35,"nodeType":"44","messageId":"45","endLine":9,"endColumn":59},{"ruleId":"42","severity":1,"message":"59","line":10,"column":12,"nodeType":"44","messageId":"45","endLine":10,"endColumn":22},{"ruleId":"42","severity":1,"message":"60","line":10,"column":24,"nodeType":"44","messageId":"45","endLine":10,"endColumn":37},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'updateToken' is assigned a value but never used.","'project_name' is assigned a value but never used.","'setProject_Name' is assigned a value but never used.","'name' is assigned a value but never used.","'setName' is assigned a value but never used.","'age' is assigned a value but never used.","'setAge' is assigned a value but never used.","'race' is assigned a value but never used.","'setRace' is assigned a value but never used.","'gender' is assigned a value but never used.","'setGender' is assigned a value but never used.","'character_description' is assigned a value but never used.","'setCharacter_Description' is assigned a value but never used.","'background' is assigned a value but never used.","'setBackground' is assigned a value but never used."]