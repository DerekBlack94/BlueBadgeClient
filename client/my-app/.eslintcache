[{"/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/index.js":"1","/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/Components/Characters/CharacterIndex.js":"2","/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/Components/Characters/CharacterCreate.js":"3","/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/App.js":"4","/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/Components/Characters/CharacterEdit.js":"5","/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/Components/Characters/CharacterTable.js":"6"},{"size":288,"mtime":1606744959437,"results":"7","hashOfConfig":"8"},{"size":1900,"mtime":1606747340083,"results":"9","hashOfConfig":"8"},{"size":4645,"mtime":1606746171973,"results":"10","hashOfConfig":"8"},{"size":1098,"mtime":1606746337456,"results":"11","hashOfConfig":"8"},{"size":4968,"mtime":1606750201335,"results":"12","hashOfConfig":"8"},{"size":1958,"mtime":1606754765845,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lnkm0m",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/index.js",[],"/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/Components/Characters/CharacterIndex.js",["28"],"import React, {useState, useEffect} from 'react';\nimport { Container, Row, Col} from 'reactstrap'\nimport CharacterCreate from './CharacterCreate';\nimport CharacterTable from './CharacterTable';\nimport CharacterEdit from './CharacterEdit';\n\nconst CharacterIndex = (props) => {\n    const [characters, setCharacters] = useState([]);\n    const [updateActive, setUpdateActive] = useState(false);\n    const [characterToUpdate, setCharacterToUpdate] = useState({});\n\n    const fetchCharacters = () => {\n        fetch('http://localhost:3000/character', {\n            method: 'GET',\n            headers: new Headers ({\n                'Content-Type': 'application/json',\n                'Authorization' : props.token\n            })\n        }) \n            .then((res) => res.json())\n            .then((charData) => {\n                setCharacters(charData)\n        })\n    };\n\n    const editUpdateCharacter = (character) => {\n        setCharacterToUpdate(character);\n        console.log(character);\n    }\n\n    const updateOn = () => {\n        setUpdateActive(true);\n    }\n    \n    const updateOff = () => {\n        setUpdateActive(false);\n    }\n\n    /*useEffect(() => {\n            fetchCharacters();\n        }, [])*/\n\nreturn(\n    <div>\n        <Container>\n            <Row>\n                <Col>\n                    <CharacterCreate fetchCharacters={fetchCharacters} token={props.token} />\n                </Col>\n                <Col>\n                    <CharacterTable characters={characters} editUpdateCharacter={editUpdateCharacter} updateOn={updateOn} fetchCharacters={fetchCharacters} token={props.token} />\n                </Col>\n                {updateActive ? <CharacterEdit characterToUpdate={characterToUpdate} updateOff={updateOff} token={props.token} fetchCharacters={fetchCharacters} /> : <div></div> }\n            </Row>\n        </Container>\n    </div>\n    );\n}\n\n\nexport default CharacterIndex;","/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/Components/Characters/CharacterCreate.js",["29"],"import React, {useState, useEffect} from 'react';\nimport {Button, Form, FormGroup, Label, Input} from 'reactstrap';\n\nconst CharacterCreate = (props) => {\n    const [project_name, setProject_Name] = useState('');\n    const [name, setName] = useState('');\n    const [age, setAge] = useState();\n    const [race, setRace] = useState('');\n    const [gender, setGender] = useState('');\n    const [character_description, setCharacter_Description] = useState('');\n    const [background, setBackground] = useState('');\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        fetch('http://localhost:3000/character/', {\n            method: 'POST',\n            body: JSON.stringify({ character : {\n                project_name: project_name, name: name, age: age, race: race, gender: gender, character_description: character_description, background: background\n            }}),\n            headers: new Headers ({\n                'Content-Type': 'application/json',\n                'Authorization': props.token\n            })\n        })\n            .then((res) => res.json())\n            .then((json) => {\n                console.log(json);\n                setProject_Name('');\n                setName('');\n                setAge();\n                setRace('');\n                setGender('');\n                setCharacter_Description('');\n                setBackground('');\n                props.fetchCharacters();\n            })\n    }\n\n    return (\n        <div>\n            <h3>Create a Character!</h3>\n            <Form>\n                <FormGroup>\n                    <Label htmlFor='project_name'>Project Name:</Label>\n                    <br />\n                    <Input name='project_name' type='text' value={project_name} onChange={(e) => setProject_Name(e.target.value)} />\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='name'>Name:</Label>\n                    <br />\n                    <Input type='text' name='name' value={name} onChange={(e) => setName(e.target.value)} />\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='age'>Age:</Label>\n                    <br />\n                    <Input type='text' name='age' value={age} onChange={(e) => setAge(e.target.value)} />\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='race'>Race:</Label>\n                    <br />\n                    <Input type='select' name='race' value={race} onChange={(e) => setRace(e.target.value)}>\n                        <option value=\"Human\">Human</option>\n                        <option value=\"HighElf\">High Elf</option>\n                        <option value=\"DarkElf\">Dark Elf</option>\n                        <option value=\"WoodElf\">Wood Elf</option>\n                        <option value=\"Dwarf\">Dwarf</option>\n                        <option value=\"Tiefling\">Tiefling</option>\n                        <option value=\"HalfOrc\">Half Orc</option>\n                        <option value=\"Hobbit\">Hobbit</option>\n                    </Input>\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='gender'>Gender:</Label>\n                    <br />\n                    <Input type='select' name='gender' value={gender} onChange={(e) => setGender(e.target.value)}>\n                        <option value=\"Male\">Male</option>\n                        <option value=\"Female\">Female</option>\n                        <option value=\"Nonbinary\">Nonbinary</option>\n                        <option value=\"Other\">Other</option>\n                    </Input>\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='character_description'>Character Description:</Label>\n                    <br />\n                    <Input type='textarea' name='character_description' value={character_description} onChange={(e) => setCharacter_Description(e.target.value)} />\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='background'>Character Background:</Label>\n                    <br />\n                    <Input type='textarea'  name='background' value={background} onChange={(e) => setBackground(e.target.value)} />\n                </FormGroup>\n\n                <br />\n                \n                <Button type='submit' onSubmit={handleSubmit}>Create</Button>\n                \n            </Form>\n        </div>\n    )\n}\n\nexport default CharacterCreate\n","/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/App.js",["30"],"/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/Components/Characters/CharacterEdit.js",[],"/Users/Emory/Documents/WDOctober2020/Assignments/Projects/BlueBadgeFinal/BlueBadgeClient/client/my-app/src/Components/Characters/CharacterTable.js",["31"],{"ruleId":"32","severity":1,"message":"33","line":1,"column":26,"nodeType":"34","messageId":"35","endLine":1,"endColumn":35},{"ruleId":"32","severity":1,"message":"33","line":1,"column":26,"nodeType":"34","messageId":"35","endLine":1,"endColumn":35},{"ruleId":"32","severity":1,"message":"36","line":15,"column":9,"nodeType":"34","messageId":"35","endLine":15,"endColumn":20},{"ruleId":"37","severity":1,"message":"38","line":17,"column":56,"nodeType":"39","messageId":"40","endLine":17,"endColumn":58},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'updateToken' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]