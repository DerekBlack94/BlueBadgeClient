{"version":3,"sources":["helpers/environment.js","Components/Characters/CharacterTable.js","Components/Characters/CharacterCreate.js","Components/Navbar/Navbar.jsx","Components/Auth/Signup.js","Components/Auth/Login.js","Components/Auth/Auth.jsx","Components/Characters/CharacterEdit.js","Components/Characters/CharacterIndex.js","App.js","reportWebVitals.js","index.js"],"names":["APIURL","window","location","hostname","CharacterTable","props","className","Table","striped","characters","map","character","index","scope","id","project_name","name","age","race","gender","character_description","background","Button","color","onClick","editUpdateCharacter","updateOn","fetch","method","headers","Headers","token","then","fetchCharacter","deleteCharacter","CharacterCreate","useState","setProject_Name","setName","setAge","setRace","setGender","setCharacter_Description","setBackground","handleSubmit","event","preventDefault","body","JSON","stringify","res","json","console","log","fetchCharacters","Form","onSubmit","FormGroup","Label","htmlFor","Input","type","value","onChange","e","target","toString","Sitebar","light","expand","Nav","NavItem","NavLink","href","to","inline","placeholder","outline","size","clickLogout","Signup","username","setUsername","password","setPassword","firstName","setFirstName","lastName","setLastName","user","response","data","updateToken","sessionToken","Login","Auth","Container","Row","Col","md","CharacterEdit","characterToUpdate","editPN","setEditPN","editName","setEditName","editAge","setEditAge","editRace","setEditRace","editGender","setEditGender","editCD","setEditCD","editBG","setEditBG","Modal","isOpen","ModalHeader","ModalBody","updateOff","CharacterIndex","setCharacters","updateActive","setUpdateActive","setCharacterToUpdate","charData","useEffect","App","setSessionToken","localStorage","getItem","newToken","setItem","clear","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1beccea2.chunk.js","sourcesContent":["let APIURL =\"\"\n\nswitch (window.location.hostname) {\n    case \"localhost\" || '127.0.0.1':\n\n    APIURL = 'http://localhost:5432';\n    break;\n\n    case \"edk-character-creator-client.herokuapp.com\":\n\n        APIURL = 'https://edk-character-creator.herokuapp.com'\n}\nexport default APIURL;","\n import React from 'react';\n import {Table, Button} from 'reactstrap';\n import APIURL from '../../helpers/environment'\n\nconst CharacterTable = (props) => {\n    const deleteCharacter = ( character ) => {\n        fetch(`${APIURL}/character/${character.id}`, {\n            method: 'DELETE',\n            headers: new Headers({\n                'Content-Type': 'appliction/json',\n                'Authorization': props.token\n            })\n        })\n        .then(() => props.fetchCharacter())\n    }\n\n\n    const characterMapper = () => {\n        return props.characters.map((character, index) => {\n            // const imageViewer = () => {\n            //     character.image != null ? <a href={character.image} target='blank'>Click to View</a> : <div></div>\n            // }\n\n            return(\n            <tr key={index}>\n                <th scope='row'>{character.id}</th>\n                <td>{character.project_name}</td>\n                <td>{character.name}</td>\n                <td>{character.age}</td>\n                <td>{character.race}</td>\n                <td>{character.gender}</td>\n                <td>{character.character_description}</td>\n                <td>{character.background}</td>\n                {/* <td>{imageViewer()}</td> */}\n\n                <td>\n                    <Button color='warning' onClick={() => {props.editUpdateCharacter(character); props.updateOn()}} >Edit</Button>\n                    <Button color='danger' onClick={() => {deleteCharacter(character)}}>Delete</Button>\n                </td> \n            </tr>\n            )\n        })\n\n    }\n\n\n\n\n\nreturn(\n\n    <div className='tableContainer'>\n        <h3>Characters</h3> \n        <hr />\n            <div className='characters'>\n            <Table striped>\n                <thead>\n                    <tr>\n                        <th>ID</th>\n                        <th>Project Name</th>\n                        <th>Name</th>\n                        <th>Age</th>\n                        <th>Race</th>\n                        <th>Gender</th>\n                        <th>Description</th>\n                        <th>Background</th>\n                        {/* <th>Image</th> */}\n\n                    </tr>\n                </thead>\n                <tbody>\n                    {characterMapper()}\n                </tbody>\n            </Table>\n            </div>\n\n    </div>\n    );\n}\n\n\nexport default CharacterTable;\n","import React, {useState, useEffect} from 'react';\nimport {Button, Form, FormGroup, Label, Input} from 'reactstrap';\nimport APIURL from '../../helpers/environment'\n\n\nconst CharacterCreate = (props) => {\n    const [project_name, setProject_Name] = useState('');\n    const [name, setName] = useState('');\n    const [age, setAge] = useState();\n    const [race, setRace] = useState('');\n    const [gender, setGender] = useState('');\n    const [character_description, setCharacter_Description] = useState('');\n    const [background, setBackground] = useState('');\n\n    // const [image, setImage] = useState({ preview: \"\", raw: \"\" });\n\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        fetch(`${APIURL}/character/create`, {\n            method: 'POST',\n            body: JSON.stringify({ character : {\n                project_name: project_name, name: name, age: age, race: race, gender: gender, character_description: character_description, background: background/*, image: image*/\n\n            }}),\n            headers: new Headers ({\n                'Content-Type': 'application/json',\n                'Authorization': props.token\n            })\n        })\n            .then((res) => res.json())\n            .then((json) => {\n                console.log(json);\n                setProject_Name('');\n                setName('');\n                setAge('');\n                setRace('');\n                setGender('');\n                setCharacter_Description('');\n                setBackground('');\n                props.fetchCharacters();\n            })\n    }\n\n\n    // const handleChange = e => {\n    //     if (e.target.files.length) {\n    //         setImage({\n    //         preview: URL.createObjectURL(e.target.files[0]),\n    //         raw: e.target.files[0]\n    //         });\n    //     }\n    // };\n\n    // const handleUpload = async e => {\n    //     e.preventDefault();\n    //     const formData = new FormData();\n    //     formData.append(\"image\", image.raw);\n\n    //     await fetch(`${APIURL}/character/create`, {\n    //         method: \"POST\",\n    //         headers: {\n    //             \"Content-Type\": \"multipart/form-data\"\n    //         },\n    //         body: formData\n    //     });\n    // };\n\n    return (\n        <div className='createContainer'>\n            <h3>Create a Character!</h3>\n            <Form onSubmit={handleSubmit}>\n                <FormGroup>\n                    <Label htmlFor='project_name'>Project Name:</Label>\n                    <br />\n                    <Input name='project_name' type='text' value={project_name} onChange={(e) => setProject_Name(e.target.value)} />\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='name'>Name:</Label>\n                    <br />\n                    <Input type='text' name='name' value={name} onChange={(e) => setName(e.target.value)} />\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='age'>Age:</Label>\n                    <br />\n                    <Input type='text' name='age' value={age} onChange={(e) => setAge(e.target.value)} />\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='race'>Race:</Label>\n                    <br />\n                    <Input type='select' name='race' value={race} onChange={(e) => setRace(e.target.value.toString())}>\n                        <option value='null'>Please pick a Race</option>\n                        <option value=\"Human\">Human</option>\n                        <option value=\"High Elf\">High Elf</option>\n                        <option value=\"Dark Elf\">Dark Elf</option>\n                        <option value=\"Wood Elf\">Wood Elf</option>\n                        <option value=\"Dwarf\">Dwarf</option>\n                        <option value=\"Tiefling\">Tiefling</option>\n                        <option value=\"Half Orc\">Half Orc</option>\n                        <option value=\"Hobbit\">Hobbit</option>\n                    </Input>\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='gender'>Gender:</Label>\n                    <br />\n                    <Input type='select' name='gender' value={gender} onChange={(e) => setGender(e.target.value.toString())}>\n                        <option value='null'>Please pick a Gender</option>\n                        <option value=\"Male\">Male</option>\n                        <option value=\"Female\">Female</option>\n                        <option value=\"Nonbinary\">Nonbinary</option>\n                        <option value=\"Other\">Other</option>\n                    </Input>\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='character_description'>Character Description:</Label>\n                    <br />\n                    <Input type='textarea' name='character_description' value={character_description} onChange={(e) => setCharacter_Description(e.target.value)} />\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='background'>Character Background:</Label>\n                    <br />\n                    <Input type='textarea'  name='background' value={background} onChange={(e) => setBackground(e.target.value)} />\n                </FormGroup>\n\n                <br />\n                \n                <Button type='submit' onSubmit={handleSubmit}>Create</Button>\n\n                {/* <label htmlFor=\"upload-button\">\n                    {image.preview ? (\n                        <img src={image.preview} alt=\"dummy\" width=\"300\" height=\"300\" />\n                    ) : (\n                    <>\n                        <span className=\"fa-stack fa-2x mt-3 mb-2\">\n                            <i className=\"fas fa-circle fa-stack-2x\" />\n                            <i className=\"fas fa-store fa-stack-1x fa-inverse\" />\n                        </span>\n                    </>\n                    )}\n                </label>\n                <input\n                    type=\"file\"\n                    id=\"upload-button\"\n                    style={{ display: \"none\" }}\n                    onChange={handleChange}\n                />\n\n                <Button onClick={handleUpload}>Upload Image</Button> */}\n\n\n            </Form>\n        </div>\n    )\n}\n\nexport default CharacterCreate\n","import './Navbar.css'\nimport React, {useState} from 'react';\n// import 'https://cdnjs.cloudflare.com/ajax/libs/reactstrap/4.8.0/reactstrap.min.js'\nimport {BrowserRouter as Router, Route, Link, Switch} from 'react-router-dom';\nimport { \n    Navbar,\n    NavbarBrand,\n    Collapse,\n    NavbarToggler,\n    Nav,\n    NavItem,\n    Button,\n    NavLink,\n    Dropdown, DropdownItem, DropdownToggle, DropdownMenu,\n    Form,\n    FormControl,\n    Input,\n}  from 'reactstrap';\nimport CharacterTable from '../Characters/CharacterTable';\nimport CharacterCreate from '../Characters/CharacterCreate';\n\n\nconst Sitebar = (props) => {\n    // const [isOpen, setIsOpen] = useState(false);\n\n    // const [dropdownOpen, setDropdownOpen] = useState(false);\n\n    // const toggle = () => setDropdownOpen(!dropdownOpen);\n\n    // const toggle2 = () => {\n    //     setIsOpen(!isOpen);\n\n    //     let newIsOpen = !isOpen;\n    //     setIsOpen(newIsOpen);\n    // }\n\n    // const toggleSearch = () => {\n    //     (props.sessionToken === localStorage.getItem('token') ? \n    //     <Form inline>\n    //         <Input type=\"text\" placeholder=\"Search Character\" className=\"mr-sm-2\" />\n    //         <Button className=\"infoBtn\" outline color=\"info\">Search </Button>\n    //     </Form> : <div></div>)\n    // }\n\n    return(\n        \n    <div className='parent'>\n\n\n        <Navbar light expand=\"md\">\n\n            {/* <NavbarBrand className=\"blue\"  href=\"/\"> EPIC CHARACTER CREATOR</NavbarBrand> */}\n            \n            {/* <NavbarToggler onClick={toggle2}/>\n            <Collapse isOpen={isOpen} navbar> */}\n            <Nav className=\"mr-auto\" >\n                <NavItem>\n                    <NavLink className=\"blue\" href=\"/\">EPIC  CHARACTER CREATOR</NavLink>\n                </NavItem>\n                    \n\n                {/* <div className='dropdown'>\n\n                <Router>\n                    <div className='styling'>\n                    <NavItem>\n                        <Dropdown className=\"charDropdown\" nav isOpen={dropdownOpen} toggle={toggle}>\n                            <DropdownToggle nav caret>Characters</DropdownToggle>\n                            <DropdownMenu>\n                                <DropdownItem header>Character Options</DropdownItem>\n                                <DropdownItem><Link to='/characters' >Browse Characters</Link></DropdownItem>\n                                <DropdownItem><Link to='/charactercreate'>Create Character</Link></DropdownItem>\n                                <DropdownItem divider />\n                                <DropdownItem>Close</DropdownItem>\n                            </DropdownMenu>\n                        </Dropdown>\n                    </NavItem>\n                    </div>\n                </Router>\n                </div> */}\n\n\n                    \n                <NavItem>\n                    <NavLink className=\"invite\" to=\"/invite\">Invite Friends</NavLink>\n                </NavItem>\n        \n            </Nav>\n\n\n            <div className='search'>\n                <Form inline>\n                    <Input type=\"text\" placeholder=\"Search Character\" className=\"mr-sm-2\" />\n                    <Button className=\"infoBtn\" outline color=\"info\">Search </Button>\n                </Form>\n                {/* {toggleSearch()} */}\n            </div>\n\n            <br/>\n                \n            <Button className=\"logoutBtn\" size=\"lg\"  onClick={props.clickLogout}>Logout</Button>\n            {/* </Collapse> */}\n        </Navbar>\n    \n        {/* <Router>\n\n        <div className = 'navRoute'>\n        <Switch>\n            <Route exact path = '/characters'><CharacterTable /></Route>\n            <Route exact path = '/charactercreate'><CharacterCreate /></Route>\n        </Switch>\n        </div>\n        </Router> */}\n\n    </div>\n    )\n}\nexport default Sitebar;","import React, {useState} from 'react';\nimport {Form, FormGroup, Label, Input, Button} from 'reactstrap';\nimport APIURL from '../../helpers/environment'\n\n\n\n\nconst Signup = (props) => {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    \n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        fetch(`${APIURL}/user/create`, {\n\n            method: 'POST',\n            body: JSON.stringify({user:{firstName: firstName, lastName: lastName, username: username, password: password}}),\n            headers: new Headers({\n                'Content-Type': 'application/json'\n            })\n        }).then(\n            (response) => response.json()\n        ).then((data) => {\n            props.updateToken(data.sessionToken)\n        })\n    }\n\n    return(\n        <div>\n            <h1>Sign Up</h1>\n            <Form onSubmit={handleSubmit}>\n                <FormGroup>\n                    <Label htmlFor=\"firstName\">First Name</Label>\n                    <Input onChange={(e) => setFirstName(e.target.value)} name=\"firstName\" value={firstName}/>\n                </FormGroup>\n                <FormGroup>\n                    <Label htmlFor=\"lastName\">Last Name</Label>\n                    <Input onChange={(e) => setLastName(e.target.value)} name=\"lastName\" value={lastName}/>\n                </FormGroup>\n                <FormGroup>\n                    <Label htmlFor=\"username\">Username</Label>\n                    <Input onChange={(e) => setUsername(e.target.value)} name=\"username\" value={username}/>\n                </FormGroup>\n                <FormGroup>\n                    <Label htmlFor=\"password\">Password</Label>\n                    <Input onChange={(e) => setPassword(e.target.value)} type='password' name=\"password\" value={password}/>\n                </FormGroup>\n                <Button className='signupBtn' type=\"submit\">Signup</Button>\n\n            </Form>\n        </div>\n    )\n}\n\n\n\nexport default Signup;","import React, {useState} from 'react';\nimport {Form, FormGroup, Label, Input, Button} from 'reactstrap';\nimport APIURL from '../../helpers/environment'\n\n\nconst Login = (props) => {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        fetch(`${APIURL}/user/login`, {\n\n            method: 'POST',\n            body: JSON.stringify({user:{username: username, password: password}}),\n            headers: new Headers({\n                'Content-Type': 'application/json'\n            })\n        })\n        .then((response) => response.json())\n        .then((data) => {\n            props.updateToken(data.sessionToken)\n        })\n    }\n\n    return(\n        <div>\n            <h1>Login</h1>\n            <Form onSubmit={handleSubmit}>\n                <FormGroup>\n                    <Label htmlFor=\"username\">Username</Label>\n                    <Input onChange={(e) => setUsername(e.target.value)} name=\"username\" value={username}/>\n                </FormGroup>\n                <FormGroup>\n                    <Label htmlFor=\"password\">Password</Label>\n                    <Input onChange={(e) => setPassword(e.target.value)} type='password' name=\"password\" value={password}/>\n                </FormGroup>\n\n                <Button className='loginBtn' type=\"submit\">Login</Button>\n\n            </Form>\n        </div>\n    )\n}\n\nexport default Login;","import React from 'react';\nimport Signup from './Signup';\nimport Login from './Login';\nimport {Container, Row, Col} from 'reactstrap';\nimport './Auth.css'\n\n\nconst Auth = (props) => {\n    console.log(props)\n    return(\n        <Container className=\"auth-container\">\n            <Row>\n\n                <Col md=\"5\" className='signup-col'>\n                    <Signup updateToken={props.updateToken}/>\n                </Col>\n                <Col md='1'></Col>\n                <Col md=\"5\" className=\"login-col\">\n\n                    <Login updateToken={props.updateToken}/>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\n// import Signup from './Signup';\n// import Login from './Login';\n\n// const Auth = () => {\n//     return (\n//         <Container>\n//             <Row>\n//                 <Col md=\"6\">\n//                     <Signup />\n//                 </Col>\n//                 <Col md=\"6\">\n//                     <Login />\n//                 </Col>\n//             </Row>\n//         </Container>\n//     )\n// }\n\nexport default Auth;","import React, {useState} from 'react';\nimport {Button, Form, FormGroup, Label, Input, Modal, ModalHeader, ModalBody} from 'reactstrap';\nimport APIURL from '../../helpers/environment'\n\n\nconst CharacterEdit = (props) => {\n    const [editPN, setEditPN] = useState(props.characterToUpdate.project_name);\n    const [editName, setEditName] = useState(props.characterToUpdate.name);\n    const [editAge, setEditAge] = useState(props.characterToUpdate.age);\n    const [editRace, setEditRace] = useState(props.characterToUpdate.race);\n    const [editGender, setEditGender] = useState(props.characterToUpdate.gender);\n    const [editCD, setEditCD] = useState(props.characterToUpdate.character_description);\n    const [editBG, setEditBG] = useState(props.characterToUpdate.background);\n\n    const characterUpdate = (event, character) => {\n        event.preventDefault();\n\n        fetch(`${APIURL}/character${props.characterToUpdate.id}`, {\n\n            method: 'PUT',\n            body: JSON.stringify({character: {\n                project_name: editPN, name: editName, age: editAge, race: editRace, gender: editGender, character_description: editCD, background: editBG\n            }}),\n            headers: new Headers({\n                'Content-Type': 'application/json',\n                'Authorization': props.token\n            })\n        })\n        .then((res) => {\n            props.fetchCharacters();\n            props.updateOff();\n        })\n    }\n\n    return (\n        <div>\n            <Modal isOpen={true}>\n                <ModalHeader>Edit Your Character</ModalHeader>\n                <ModalBody>\n                    <Form onSubmit={characterUpdate}>\n                        <FormGroup>\n                            <Label htmlFor='project_name'>Edit Project Name</Label>\n                            <Input name='project_name' value={editPN} onChange={(e) => setEditPN(e.target.value)} />\n                        </FormGroup>\n\n                        <br />\n\n                        <FormGroup>\n                            <Label htmlFor='name'>Edit Name:</Label>\n                            <Input type='text' name='name' value={editName} onChange={(e) => setEditName(e.target.value)} />\n                        </FormGroup>\n\n                        <br />\n\n                        <FormGroup>\n                            <Label htmlFor='age'>Edit Age:</Label>\n                            <Input type='text' name='age' value={editAge} onChange={(e) => setEditAge(e.target.value)} />\n                        </FormGroup>\n\n                        <br />\n\n                        <FormGroup>\n                            <Label htmlFor='race'>Edit Race:</Label>\n                            <Input type='select' name='race' value={editRace} onChange={(e) => setEditRace(e.target.value)}>\n                                <option value=\"Human\">Human</option>\n                                <option value=\"HighElf\">High Elf</option>\n                                <option value=\"DarkElf\">Dark Elf</option>\n                                <option value=\"WoodElf\">Wood Elf</option>\n                                <option value=\"Dwarf\">Dwarf</option>\n                                <option value=\"Tiefling\">Tiefling</option>\n                                <option value=\"HalfOrc\">Half Orc</option>\n                                <option value=\"Hobbit\">Hobbit</option>\n                            </Input>\n                        </FormGroup>\n\n                        <br />\n\n                        <FormGroup>\n                            <Label htmlFor='gender'>Edit Gender:</Label>\n                            <Input type='select' name='gender' value={editGender} onChange={(e) => setEditGender(e.target.value)}>\n                                <option value=\"Male\">Male</option>\n                                <option value=\"Female\">Female</option>\n                                <option value=\"Nonbinary\">Nonbinary</option>\n                                <option value=\"Other\">Other</option>\n                            </Input>\n                        </FormGroup>\n\n                        <br />\n\n                        <FormGroup>\n                            <Label htmlFor='character_description'>Edit Character Description:</Label>\n                            <Input type='textarea' name='character_description' value={editCD} onChange={(e) => setEditCD(e.target.value)} />\n                        </FormGroup>\n\n                        <br />\n\n                        <FormGroup>\n                            <Label htmlFor='background'>Edit Character Background:</Label>\n                            <Input type='textarea'  name='background' value={editBG} onChange={(e) => setEditBG(e.target.value)} />\n                        </FormGroup>\n\n                        <br />\n                \n                        <Button type='submit'>Submit Edited Character</Button>\n                    </Form>\n                </ModalBody>\n            </Modal>\n        </div>\n    )\n}\n\nexport default CharacterEdit\n","import React, {useState, useEffect} from 'react';\nimport { Container, Row, Col} from 'reactstrap'\nimport CharacterCreate from './CharacterCreate';\nimport CharacterTable from './CharacterTable';\nimport CharacterEdit from './CharacterEdit';\nimport APIURL from '../../helpers/environment'\n\n\nconst CharacterIndex = (props) => {\n    const [characters, setCharacters] = useState([]);\n    const [updateActive, setUpdateActive] = useState(false);\n    const [characterToUpdate, setCharacterToUpdate] = useState({});\n\n    const fetchCharacters = () => {\n\n        fetch(`${APIURL}/character/`, {\n            method: 'GET',\n            headers: new Headers ({\n                'Content-Type': 'application/json',\n                'Authorization' : props.token\n            })\n        }) \n            .then((res) => res.json())\n            .then((charData) => {\n                setCharacters(charData)\n        })\n    };\n\n    const editUpdateCharacter = (character) => {\n        setCharacterToUpdate(character);\n        console.log(character);\n    }\n\n\n    const updateOn = () => {\n        setUpdateActive(true);\n    }\n    \n    const updateOff = () => {\n        setUpdateActive(false);\n    }\n\n    useEffect(() => {\n            fetchCharacters();\n        }, [])\n\nreturn(\n\n    <div className='indexContainer'>\n        <Container>\n            <Row>\n\n                <Col md=\"8\">\n                    <CharacterTable characters={characters} editUpdateCharacter={editUpdateCharacter}\n                    updateOn={updateOn}\n                    fetchCharacters={fetchCharacters} token={props.token}/>\n                </Col>\n\n                <Col md=\"4\">\n                    <CharacterCreate fetchCharacters={fetchCharacters} token={props.token}/>\n                </Col>\n\n\n                {updateActive ? <CharacterEdit characterToUpdate={characterToUpdate}\n                updateOff={updateOff} token={props.token} fetchCharacters={fetchCharacters}/> : <></>}\n\n            </Row>\n        </Container>\n    </div>\n    );\n}\nexport default CharacterIndex;\n\n","import React from 'react';\nimport {useState, useEffect} from 'react';\nimport Sitebar from './Components/Navbar/Navbar';\nimport {Button} from 'reactstrap';\n// import 'bootstrap/dist/css/bootstrap.min.css'\nimport Auth from './Components/Auth/Auth'\nimport CharacterIndex from './Components/Characters/CharacterIndex';\nimport './App.css';\n\n\n\nfunction App () {\n  const [sessionToken, setSessionToken] = useState('');\n\n  useEffect(() => {\n    if(localStorage.getItem('token')){\n      setSessionToken(localStorage.getItem('token'));\n    }\n  }, [])\n  \n  const updateToken = (newToken) => {\n    localStorage.setItem('token', newToken);\n    setSessionToken(newToken);\n    console.log(sessionToken);\n  }\n  const clearToken = () => {\n    localStorage.clear();\n    setSessionToken('');\n  }\n\n  //**need to have Auth set up before use */\n\n  const protectedViews = () => {\n    return (sessionToken === localStorage.getItem('token') ? <CharacterIndex token={sessionToken}/> : <Auth updateToken={updateToken}/> ) \n  }\n\n  return (\n    <div>\n    \n      <Sitebar clickLogout={clearToken} sessionToken={sessionToken} />\n      {/* <Auth updateToken={updateToken}/> */}\n      {protectedViews()} \n      {/* <CharacterIndex token={sessionToken} /> */}\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n  // remove bootstrap once pushed??\n  \nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import 'bootstrap/dist/css/bootstrap.css';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n\n    <div className='reactOverride'>\n      <App />\n    </div>\n\n  </React.StrictMode>\n  ,\n  document.getElementById('root')\n\n);\n\nreportWebVitals();\n"],"sourceRoot":""}