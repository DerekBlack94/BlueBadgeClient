[{"/Users/kellycasper/Code/blueBadgeProject/finalProject/BlueBadgeClient/src/reportWebVitals.js":"1","/Users/kellycasper/Code/blueBadgeProject/finalProject/BlueBadgeClient/src/Components/Navbar/Navbar.jsx":"2","/Users/kellycasper/Code/blueBadgeProject/finalProject/BlueBadgeClient/src/Components/Characters/CharacterCreate.js":"3","/Users/kellycasper/Code/blueBadgeProject/finalProject/BlueBadgeClient/src/Components/Auth/Signup.js":"4","/Users/kellycasper/Code/blueBadgeProject/finalProject/BlueBadgeClient/src/Components/Auth/Login.js":"5","/Users/kellycasper/Code/blueBadgeProject/finalProject/BlueBadgeClient/src/App.js":"6"},{"size":362,"mtime":1606938591520,"results":"7","hashOfConfig":"8"},{"size":3755,"mtime":1606938591428,"results":"9","hashOfConfig":"8"},{"size":6262,"mtime":1606938591425,"results":"10","hashOfConfig":"8"},{"size":2465,"mtime":1606956001612,"results":"11","hashOfConfig":"8"},{"size":1476,"mtime":1606941421592,"results":"12","hashOfConfig":"8"},{"size":1265,"mtime":1606938591422,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"g8ey3h",{"filePath":"16","messages":"17","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/kellycasper/Code/blueBadgeProject/finalProject/BlueBadgeClient/src/reportWebVitals.js",[],"/Users/kellycasper/Code/blueBadgeProject/finalProject/BlueBadgeClient/src/Components/Navbar/Navbar.jsx",["30","31","32","33","34","35","36","37","38","39","40","41","42"],"/Users/kellycasper/Code/blueBadgeProject/finalProject/BlueBadgeClient/src/Components/Characters/CharacterCreate.js",["43"],"import React, {useState, useEffect} from 'react';\nimport {Button, Form, FormGroup, Label, Input} from 'reactstrap';\nimport APIURL from '../../helpers/environment'\n\n\nconst CharacterCreate = (props) => {\n    const [project_name, setProject_Name] = useState('');\n    const [name, setName] = useState('');\n    const [age, setAge] = useState();\n    const [race, setRace] = useState('');\n    const [gender, setGender] = useState('');\n    const [character_description, setCharacter_Description] = useState('');\n    const [background, setBackground] = useState('');\n\n    const [image, setImage] = useState({ preview: \"\", raw: \"\" });\n\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        fetch(`${APIURL}/character/create`, {\n            method: 'POST',\n            body: JSON.stringify({ character : {\n                project_name: project_name, name: name, age: age, race: race, gender: gender, character_description: character_description, background: background, image: image\n\n            }}),\n            headers: new Headers ({\n                'Content-Type': 'application/json',\n                'Authorization': props.token\n            })\n        })\n            .then((res) => res.json())\n            .then((json) => {\n                console.log(json);\n                setProject_Name('');\n                setName('');\n                setAge();\n                setRace('');\n                setGender('');\n                setCharacter_Description('');\n                setBackground('');\n                props.fetchCharacters();\n            })\n    }\n\n\n    const handleChange = e => {\n        if (e.target.files.length) {\n            setImage({\n            preview: URL.createObjectURL(e.target.files[0]),\n            raw: e.target.files[0]\n            });\n        }\n    };\n\n    const handleUpload = async e => {\n        e.preventDefault();\n        const formData = new FormData();\n        formData.append(\"image\", image.raw);\n\n        await fetch('https://the-epic-character-creator.herokuapp.com/character/', {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            },\n            body: formData\n        });\n    };\n\n    return (\n        <div className='createContainer'>\n            <h3>Create a Character!</h3>\n            <Form onSubmit={handleSubmit}>\n                <FormGroup>\n                    <Label htmlFor='project_name'>Project Name:</Label>\n                    <br />\n                    <Input name='project_name' type='text' value={project_name} onChange={(e) => setProject_Name(e.target.value)} />\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='name'>Name:</Label>\n                    <br />\n                    <Input type='text' name='name' value={name} onChange={(e) => setName(e.target.value)} />\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='age'>Age:</Label>\n                    <br />\n                    <Input type='text' name='age' value={age} onChange={(e) => setAge(e.target.value)} />\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='race'>Race:</Label>\n                    <br />\n                    <Input type='select' name='race' value={race} onChange={(e) => setRace(e.target.value)}>\n                        <option value=\"Human\">Human</option>\n                        <option value=\"HighElf\">High Elf</option>\n                        <option value=\"DarkElf\">Dark Elf</option>\n                        <option value=\"WoodElf\">Wood Elf</option>\n                        <option value=\"Dwarf\">Dwarf</option>\n                        <option value=\"Tiefling\">Tiefling</option>\n                        <option value=\"HalfOrc\">Half Orc</option>\n                        <option value=\"Hobbit\">Hobbit</option>\n                    </Input>\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='gender'>Gender:</Label>\n                    <br />\n                    <Input type='select' name='gender' value={gender} onChange={(e) => setGender(e.target.value)}>\n                        <option value=\"Male\">Male</option>\n                        <option value=\"Female\">Female</option>\n                        <option value=\"Nonbinary\">Nonbinary</option>\n                        <option value=\"Other\">Other</option>\n                    </Input>\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='character_description'>Character Description:</Label>\n                    <br />\n                    <Input type='textarea' name='character_description' value={character_description} onChange={(e) => setCharacter_Description(e.target.value)} />\n                </FormGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Label htmlFor='background'>Character Background:</Label>\n                    <br />\n                    <Input type='textarea'  name='background' value={background} onChange={(e) => setBackground(e.target.value)} />\n                </FormGroup>\n\n                <br />\n                \n                <Button type='submit' onSubmit={handleSubmit}>Create</Button>\n\n                <label htmlFor=\"upload-button\">\n                    {image.preview ? (\n                        <img src={image.preview} alt=\"dummy\" width=\"300\" height=\"300\" />\n                    ) : (\n                    <>\n                        <span className=\"fa-stack fa-2x mt-3 mb-2\">\n                            <i className=\"fas fa-circle fa-stack-2x\" />\n                            <i className=\"fas fa-store fa-stack-1x fa-inverse\" />\n                        </span>\n                    </>\n                    )}\n                </label>\n                <input\n                    type=\"file\"\n                    id=\"upload-button\"\n                    style={{ display: \"none\" }}\n                    onChange={handleChange}\n                />\n\n                <Button onClick={handleUpload}>Upload Image</Button>\n\n\n            </Form>\n        </div>\n    )\n}\n\nexport default CharacterCreate\n",["44","45"],"/Users/kellycasper/Code/blueBadgeProject/finalProject/BlueBadgeClient/src/Components/Auth/Signup.js",["46"],"import React, {useState, useEffect} from 'react';\nimport {Form, FormGroup, Label, Input, Button} from 'reactstrap';\n// import APIURL from '../../helpers/environment'\n\n\nconst Signup = (props) => {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    const [signupErrors, setSignupErrors] = useState('');\n    \n    const handleSubmit = async (event) => {\n\t\tevent.preventDefault();\n\t\t// front end error handling goes here\n\t\ttry {\n\t\t\tconst response = await fetch('http://localhost:3000/user/create', {\n\n\t\t\t\tmethod: 'POST',\n\t\t\t\tbody: JSON.stringify({user:{firstName: firstName, lastName: lastName, username: username, password: password}}),\n\t\t\t\theaders: new Headers({\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t})\n            });\n            console.log(response);\n            const data = await response.json();\n            console.log(data);\n            if (response.status === 500) {\n                setSignupErrors(data.error.errors.map((error) => error.message).join(\"\\n\"))\n            }\n\t\t\tprops.updateToken(data.sessionToken);\n\t\t} catch (err) {\n\t\t\tconsole.log(err)\n\t\t}\n\t}\n\n    return(\n        <div>\n            <h1>Sign Up</h1>\n            {signupErrors && (<div>{signupErrors}</div>)}\n            <Form onSubmit={handleSubmit}>\n                <FormGroup>\n                    <Label htmlFor=\"firstName\">First Name</Label>\n                    <Input onChange={(e) => setFirstName(e.target.value)} name=\"firstName\" value={firstName}/>\n                </FormGroup>\n                <FormGroup>\n                    <Label htmlFor=\"lastName\">Last Name</Label>\n                    <Input onChange={(e) => setLastName(e.target.value)} name=\"lastName\" value={lastName}/>\n                </FormGroup>\n                <FormGroup>\n                    <Label htmlFor=\"username\">Username</Label>\n                    <Input onChange={(e) => setUsername(e.target.value)} name=\"username\" value={username}/>\n                </FormGroup>\n                <FormGroup>\n                    <Label htmlFor=\"password\">Password</Label>\n                    <Input onChange={(e) => setPassword(e.target.value)} type='password' name=\"password\" value={password}/>\n                </FormGroup>\n                <Button className='signupBtn' type=\"submit\">Signup</Button>\n\n            </Form>\n        </div>\n    )\n}\n\n\n\nexport default Signup;\n","/Users/kellycasper/Code/blueBadgeProject/finalProject/BlueBadgeClient/src/Components/Auth/Login.js",["47"],"import React, {useState} from 'react';\nimport {Form, FormGroup, Label, Input, Button} from 'reactstrap';\nimport APIURL from '../../helpers/environment'\n\n\nconst Login = (props) => {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        fetch('http://localhost:3000/user/login', {\n\n            method: 'POST',\n            body: JSON.stringify({user:{username: username, password: password}}),\n            headers: new Headers({\n                'Content-Type': 'application/json'\n            })\n        })\n        .then((response) => response.json())\n        .then((data) => {\n            props.updateToken(data.sessionToken)\n        })\n    }\n\n    return(\n        <div>\n            <h1>Login</h1>\n            <Form onSubmit={handleSubmit}>\n                <FormGroup>\n                    <Label htmlFor=\"username\">Username</Label>\n                    <Input onChange={(e) => setUsername(e.target.value)} name=\"username\" value={username}/>\n                </FormGroup>\n                <FormGroup>\n                    <Label htmlFor=\"password\">Password</Label>\n                    <Input onChange={(e) => setPassword(e.target.value)} type='password' name=\"password\" value={password}/>\n                </FormGroup>\n\n                <Button className='loginBtn' type=\"submit\">Login</Button>\n\n            </Form>\n        </div>\n    )\n}\n\nexport default Login;","/Users/kellycasper/Code/blueBadgeProject/finalProject/BlueBadgeClient/src/App.js",["48"],{"ruleId":"49","severity":1,"message":"50","line":4,"column":26,"nodeType":"51","messageId":"52","endLine":4,"endColumn":32},{"ruleId":"49","severity":1,"message":"53","line":4,"column":34,"nodeType":"51","messageId":"52","endLine":4,"endColumn":39},{"ruleId":"49","severity":1,"message":"54","line":4,"column":41,"nodeType":"51","messageId":"52","endLine":4,"endColumn":45},{"ruleId":"49","severity":1,"message":"55","line":4,"column":47,"nodeType":"51","messageId":"52","endLine":4,"endColumn":53},{"ruleId":"49","severity":1,"message":"56","line":7,"column":5,"nodeType":"51","messageId":"52","endLine":7,"endColumn":16},{"ruleId":"49","severity":1,"message":"57","line":14,"column":5,"nodeType":"51","messageId":"52","endLine":14,"endColumn":13},{"ruleId":"49","severity":1,"message":"58","line":14,"column":15,"nodeType":"51","messageId":"52","endLine":14,"endColumn":27},{"ruleId":"49","severity":1,"message":"59","line":14,"column":29,"nodeType":"51","messageId":"52","endLine":14,"endColumn":43},{"ruleId":"49","severity":1,"message":"60","line":14,"column":45,"nodeType":"51","messageId":"52","endLine":14,"endColumn":57},{"ruleId":"49","severity":1,"message":"61","line":16,"column":5,"nodeType":"51","messageId":"52","endLine":16,"endColumn":16},{"ruleId":"49","severity":1,"message":"62","line":19,"column":8,"nodeType":"51","messageId":"52","endLine":19,"endColumn":22},{"ruleId":"49","severity":1,"message":"63","line":20,"column":8,"nodeType":"51","messageId":"52","endLine":20,"endColumn":23},{"ruleId":"49","severity":1,"message":"64","line":28,"column":11,"nodeType":"51","messageId":"52","endLine":28,"endColumn":17},{"ruleId":"49","severity":1,"message":"65","line":1,"column":26,"nodeType":"51","messageId":"52","endLine":1,"endColumn":35},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"49","severity":1,"message":"65","line":1,"column":26,"nodeType":"51","messageId":"52","endLine":1,"endColumn":35},{"ruleId":"49","severity":1,"message":"70","line":3,"column":8,"nodeType":"51","messageId":"52","endLine":3,"endColumn":14},{"ruleId":"49","severity":1,"message":"71","line":4,"column":9,"nodeType":"51","messageId":"52","endLine":4,"endColumn":15},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Link' is defined but never used.","'Switch' is defined but never used.","'NavbarBrand' is defined but never used.","'Dropdown' is defined but never used.","'DropdownItem' is defined but never used.","'DropdownToggle' is defined but never used.","'DropdownMenu' is defined but never used.","'FormControl' is defined but never used.","'CharacterTable' is defined but never used.","'CharacterCreate' is defined but never used.","'toggle' is assigned a value but never used.","'useEffect' is defined but never used.","no-native-reassign",["72"],"no-negated-in-lhs",["73"],"'APIURL' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation"]